.. _ch30:

***************************************
Chapter 30. Bar, Pie, Area, Line Charts
***************************************

.. topic:: Overview

    The Bar Chart; The Pie Chart; 3D Pie; Donuts; The Area Chart; The Line Chart: multiple lines

    Examples: |chart_2_views|_

This chapter continues using the |chart_2_views|_ example from the previous chapter, but looks at how bar, pie (including 3D and donut versions),
area, and line charts can be generated from spreadsheet data. The relevant lines of |chart_2_views_py|_ are:

.. tabs::

    .. code-tab:: python
        :emphasize-lines: 12, 14, 24, 28, 30, 36

        # Chart2View.main() ofchart_2_views.py
        def main(self) -> None:
            _ = Lo.load_office(connector=Lo.ConnectPipe(), opt=Lo.Options(verbose=True))

            try:
                doc = Calc.open_doc(fnm=self._data_fnm)
                GUI.set_visible(is_visible=True, odoc=doc)
                sheet = Calc.get_sheet(doc=doc)

                chart_doc = None
                if self._chart_kind == ChartKind.AREA:
                    chart_doc = self._area_chart(doc=doc, sheet=sheet) # section 3
                elif self._chart_kind == ChartKind.BAR:
                    chart_doc = self._bar_chart(doc=doc, sheet=sheet) # section 1
                elif self._chart_kind == ChartKind.BUBBLE_LABELED:
                    chart_doc = self._labeled_bubble_chart(doc=doc, sheet=sheet)
                elif self._chart_kind == ChartKind.COLUMN:
                    chart_doc = self._col_chart(doc=doc, sheet=sheet)
                elif self._chart_kind == ChartKind.COLUMN_LINE:
                    chart_doc = self._col_line_chart(doc=doc, sheet=sheet)
                elif self._chart_kind == ChartKind.COLUMN_MULTI:
                    chart_doc = self._mult_col_chart(doc=doc, sheet=sheet)
                elif self._chart_kind == ChartKind.DONUT:
                    chart_doc = self._donut_chart(doc=doc, sheet=sheet) # 2.3
                elif self._chart_kind == ChartKind.HAPPY_STOCK:
                    chart_doc = self._happy_stock_chart(doc=doc, sheet=sheet)
                elif self._chart_kind == ChartKind.LINE:
                    chart_doc = self._line_chart(doc=doc, sheet=sheet) # section 4
                elif self._chart_kind == ChartKind.LINES:
                    chart_doc = self._lines_chart(doc=doc, sheet=sheet) # section 4
                elif self._chart_kind == ChartKind.NET:
                    chart_doc = self._net_chart(doc=doc, sheet=sheet)
                elif self._chart_kind == ChartKind.PIE:
                    chart_doc = self._pie_chart(doc=doc, sheet=sheet)
                elif self._chart_kind == ChartKind.PIE_3D:
                    chart_doc = self._pie_3d_chart(doc=doc, sheet=sheet) # section 2.1
                elif self._chart_kind == ChartKind.SCATTER:
                    chart_doc = self._scatter_chart(doc=doc, sheet=sheet)
                elif self._chart_kind == ChartKind.SCATTER_LINE_ERROR:
                    chart_doc = self._scatter_line_error_chart(doc=doc, sheet=sheet)
                elif self._chart_kind == ChartKind.SCATTER_LINE_LOG:
                    chart_doc = self._scatter_line_log_chart(doc=doc, sheet=sheet)
                elif self._chart_kind == ChartKind.STOCK_PRICES:
                    chart_doc = self._stock_prices_chart(doc=doc, sheet=sheet)

                # ...

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None

.. _ch30_the_bar_chart:

30.1 The Bar Chart
==================

A bar chart is generated by ``_bar_chart()`` in |chart_2_views_py|_ using the "Sneakers Sold this Month" Table from :numref:`ch30fig_sneakers_sold_month_tbl`.

..
    figure 1

.. cssclass:: screen_shot invert

    .. _ch30fig_sneakers_sold_month_tbl:
    .. figure:: https://user-images.githubusercontent.com/4193389/206770355-7905b11a-36ba-43ae-968a-11ea231ba52b.png
        :alt: The Sneakers Sold this Month Table
        :figclass: align-center

        :The "Sneakers Sold this Month" Table.

The resulting chart is shown in :numref:`ch30fig_bar_fig_1`.

..
    figure 2

.. cssclass:: screen_shot

    .. _ch30fig_bar_fig_1:
    .. figure:: https://user-images.githubusercontent.com/4193389/206770689-f49af747-3f87-4d38-9aa1-75c7d4320988.png
        :alt: The Bar Chart for the Table in previous figure
        :figclass: align-center

        :The Bar Chart for the Table in :numref:`ch30fig_sneakers_sold_month_tbl`.

It's informative to compare the bar chart in :numref:`ch30fig_bar_fig_1` with the column chart for the same data in :numref:`ch29fig_chart_for_sneaker_sold_month_tbl`.
The data bars and axes have been swapped, so the ``x-axis`` in the column chart is the ``y-axis`` in the bar chart, and vice versa.

``_bar_chart()`` is:

.. tabs::

    .. code-tab:: python

        # Chart2View._bar_chart() in chart_2_views.py
        def _bar_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:
            # uses "Sneakers Sold this Month" table
            range_addr = Calc.get_address(sheet=sheet, range_name="A2:B8")
            chart_doc = Chart2.insert_chart(
                sheet=sheet,
                cells_range=range_addr,
                cell_name="B3",
                width=15,
                height=11,
                diagram_name=ChartTypes.Bar.TEMPLATE_STACKED.BAR,
            )
            Calc.goto_cell(cell_name="A1", doc=doc)

            Chart2.set_title(
                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name="A1")
            )
            Chart2.set_x_axis_title(
                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name="A2")
            )
            Chart2.set_y_axis_title(
                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name="B2")
            )
            # rotate x-axis which is now the vertical axis
            Chart2.rotate_y_axis_title(chart_doc=chart_doc, angle=Angle(90))
            return chart_doc

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None

Although the axes have been swapped in the chart drawing, the API still uses the same indices to refer to the axes in ``XCoordinateSystem.getAxisByDimension()``.
This means that ``x-axis`` is the vertical axis in a bar chart, and ``y-axis`` the horizontal.
This is most apparent in the last line of ``_bar_chart()``:

.. tabs::

    .. code-tab:: python

        Chart2.rotate_y_axis_title(chart_doc=chart_doc, angle=Angle(90))

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None

.. seealso::

    - :py:meth:`.Chart2.rotate_y_axis_title`
    - :py:class:`~.data_type.angle.Angle`

This causes the ``x-axis`` title to rotate 90 degrees counter-clockwise, which affects the ``Brand`` string on the vertical axis of the chart (see :numref:`ch30fig_bar_fig_1`).

.. _ch30_pie_chart:

30.2 The Pie Chart
==================

``_pie_chart()`` in |chart_2_views_py|_ utilizes the "Top 5 States with the Most Elementary and Secondary Schools" table in |ods_doc| (see :numref:`ch30fig_top_five_states`) to generate the pie chart in :numref:`ch30fig_pie_for_fig3`.

..
    figure 3

.. cssclass:: screen_shot invert

    .. _ch30fig_top_five_states:
    .. figure:: https://user-images.githubusercontent.com/4193389/206774860-8f367c86-68ba-448b-ae6f-effb5162f0c1.png
        :alt: The Top five States Table
        :figclass: align-center

        :The "Top 5 States" Table.

..
    figure 4

.. cssclass:: screen_shot

    .. _ch30fig_pie_for_fig3:
    .. figure:: https://user-images.githubusercontent.com/4193389/206774982-c787ea61-0bde-4c9e-8d8b-46b0c448233c.png
        :alt: A Pie Chart for the Table in previous figure.
        :figclass: align-center

        :A Pie Chart for the Table in :numref:`ch30fig_top_five_states`.

``_pie_chart()`` is:

.. tabs::

    .. code-tab:: python

        # Chart2View._pie_chart() in chart_2_views.py
        def _pie_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:
            # uses "Top 5 States with the Most Elementary and Secondary Schools"
            range_addr = Calc.get_address(sheet=sheet, range_name="E2:F8")
            chart_doc = Chart2.insert_chart(
                sheet=sheet,
                cells_range=range_addr,
                cell_name="B10",
                width=12,
                height=11,
                diagram_name=ChartTypes.Pie.TEMPLATE_DONUT.PIE,
            )
            Calc.goto_cell(cell_name="A1", doc=doc)

            Chart2.set_title(
                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name="E1")
            )
            Chart2.set_subtitle(
                chart_doc=chart_doc, subtitle=Calc.get_string(sheet=sheet, cell_name="F2")
            )
            Chart2.view_legend(chart_doc=chart_doc, is_visible=True)
            return chart_doc

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None

:py:meth:`.Chart2.set_subtitle` displays the secondary heading in the chart; there's little difference between it and the earlier :py:meth:`.Chart2.set_title`:

.. tabs::

    .. code-tab:: python

        # in Chart2 class
        @classmethod
        def set_subtitle(cls, chart_doc: XChartDocument, subtitle: str) -> XTitle:
            try:
                diagram = chart_doc.getFirstDiagram()
                titled = Lo.qi(XTitled, diagram, True)
                title = cls.create_title(subtitle)
                titled.setTitleObject(title)
                fname = Info.get_font_general_name()
                cls.set_x_title_font(title, fname, 12)
                return title
            except ChartError:
                raise
            except Exception as e:
                raise ChartError(f'Error setting subtitle "{subtitle}" for chart') from e

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None

The XTitled_ reference for the subtitle is obtained from XDiagram_, whereas the chart title is part of XChartDocument_.

.. _ch30_more_3d_pizzazz:

30.2.1 More 3D Pizzazz
======================

For some reason people like 3D pie charts, so ``_pie_3d_chart()`` in |chart_2_views_py|_ produces one (see :numref:`ch30fig_3d_pie_chart_of_fig3_tbl`) using the same table as the 2D version.

..
    figure 5

.. cssclass:: screen_shot

    .. _ch30fig_3d_pie_chart_of_fig3_tbl:
    .. figure:: https://user-images.githubusercontent.com/4193389/206778985-280720f1-30ba-49cc-9848-997dd42f48a9.png
        :alt: A 3D Pie Chart for the Table in Figure three of this chapter
        :figclass: align-center

        :A 3D Pie Chart for the Table in :numref:`ch30fig_top_five_states`.

``_pie_3d_chart()`` is the same as ``_pie_chart()`` except that the ``ThreeDPie`` template is used:

.. tabs::

    .. code-tab:: python

        # Chart2View._pie_3d_chart() in chart_2_views.py
        def _pie_3d_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:
            # uses "Top 5 States with the Most Elementary and Secondary Schools"
            range_addr = Calc.get_address(sheet=sheet, range_name="E2:F8")
            chart_doc = Chart2.insert_chart(
                sheet=sheet,
                cells_range=range_addr,
                cell_name="B10",
                width=12,
                height=11,
                diagram_name=ChartTypes.Pie.TEMPLATE_3D.PIE_3D,
            )
            Calc.goto_cell(cell_name="A1", doc=doc)

            Chart2.set_title(
                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name="E1")
            )
            Chart2.set_subtitle(
                chart_doc=chart_doc, subtitle=Calc.get_string(sheet=sheet, cell_name="F2")
            )
            Chart2.view_legend(chart_doc=chart_doc, is_visible=True)

            # ...
            # more code explained in a moment

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None

The drawback of 3D pie charts is the shape distortion caused by the perspective.
For example, the red segment in the foreground of :numref:`ch30fig_3d_pie_chart_of_fig3_tbl` seems bigger than the dark blue segment at the back but that segment is numerical larger.

The default rotation of a 3D pie is ``-60`` degrees around the horizontal so its bottom edge appears to extend out of the page, and ``0`` degrees rotation around the vertical.

These can be changed by modifying the ``RotationHorizontal`` and ``RotationVertical`` properties of the Diagram service.
For example:

.. tabs::

    .. code-tab:: python

        # part of Chart2View._pie_3d_chart() in chart_2_views.py
        diagram = chart_doc.getFirstDiagram()
        Props.set(
            diagram,
            RotationHorizontal=0,  # -ve rotates bottom edge out of page; default is -60
            RotationVertical=-45,  # -ve rotates left edge out of page; default is 0 (i.e. no rotation)
        )

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None

This changes the pie chart's appearance to be as in :numref:`ch30fig_rotated_of_fig3`.

..
    figure 6

.. cssclass:: screen_shot

    .. _ch30fig_rotated_of_fig3:
    .. figure:: https://user-images.githubusercontent.com/4193389/206781455-8662ef66-57d4-42c4-b42b-838144ce9741.png
        :alt: A Rotated 3D Pie Chart for the Table in fig three of this chapter
        :figclass: align-center

        :A Rotated 3D Pie Chart for the Table in :numref:`ch30fig_top_five_states`.

The easiest way to see the current values for the diagram's properties is to add a call to :py:meth:`.Props.show_obj_props` to the code above:

.. tabs::

    .. code-tab:: python

        Props.show_obj_props("Diagram", diagram)

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None

.. _ch30_change_dp_lbl:

30.2.2 Changing the Data Point Labels
-------------------------------------

Two problems with :numref:`ch30fig_3d_pie_chart_of_fig3_tbl` and :numref:`ch30fig_rotated_of_fig3` are the small data point labels and their default font color (black) which doesn't stand out against the darker pie segments.

These issues can be fixed by changing some of the font related properties for the data points. This means a return to the DataSeries_ service shown in :numref:`ch30fig_data_series_xdata_series_interface`.

..
    figure 7

.. cssclass:: diagram invert

    .. _ch30fig_data_series_xdata_series_interface:
    .. figure:: https://user-images.githubusercontent.com/4193389/206782123-dbd11c22-802a-42fe-92c7-a554496b8ff9.png
        :alt: The DataSeries Service and XDataSeries Interface.
        :figclass: align-center

        :The DataSeries_ Service and XDataSeries_ Interface.

The DataPointProperties_ class appears twice in :numref:`ch30fig_data_series_xdata_series_interface` because it allows the data point properties to be changed in two ways.
The DataPointProperties_ class associated with the DataSeries_ service allows a property change to be applied to all the points collectively.
The DataPointProperties_ class associated with a particular point allows a property to be changed only in that point.

For example, the former approach is used to change all the data point labels in the pie chart to ``14pt``, ``bold``, and ``white``:

.. tabs::

    .. code-tab:: python

        # in Chart2View._pie_3d_chart() in chart_2_views.py
        # ...
        # change all the data points to be bold white 14pt
        ds = Chart2.get_data_series(chart_doc)
        Props.set(ds[0], CharHeight=14.0, CharColor=CommonColor.WHITE, CharWeight=FontWeight.BOLD)
        #...

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None

The changes to the chart are shown in :numref:`ch30fig_3d_pie_changed_dp_lbl`.

..
    figure 8

.. cssclass:: screen_shot

    .. _ch30fig_3d_pie_changed_dp_lbl:
    .. figure:: https://user-images.githubusercontent.com/4193389/206789448-d8387005-b3f9-4220-97c6-ee1adc873181.png
        :alt: A 3D Pie Chart with Changed Data Point Labels
        :figclass: align-center

        :A 3D Pie Chart with Changed Data Point Labels.

The second approach is employed to emphasize the "National Average" data point label, which is the last one in the series:

.. tabs::

    .. code-tab:: python

        # end of Chart2View._pie_3d_chart() in chart_2_views.py
        # ...
        try:
            props = Chart2.get_data_point_props(chart_doc=chart_doc, series_idx=0, idx=0)
            Props.set(
                props,
                CharHeight=14.0,
                CharColor=CommonColor.WHITE,
                CharWeight=FontWeight.BOLD
            )
        except mEx.NotFoundError:
            Lo.print("No Properties found for chart.")
        return chart_doc

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None

This produces the chart shown in :numref:`ch30fig_one_change_of_fig8`, where only the National Average label is changed.

..
    figure 9

.. cssclass:: screen_shot

    .. _ch30fig_one_change_of_fig8:
    .. figure:: https://user-images.githubusercontent.com/4193389/206804167-d35a6199-634e-4c62-84e1-ffc86ec35120.png
        :alt: A 3D Pie Chart with One Changed Data Point Label
        :figclass: align-center

        :A 3D Pie Chart with One Changed Data Point Label.

:py:meth:`.Chart2.get_data_point_props` takes three arguments - the chart document, the index of the data series, and the index of the data point inside that series.
The pie chart uses six data points, so a valid index will be between ``0`` and ``5``.

If a matching data point is found by :py:meth:`.Chart2.get_data_point_props` then a reference to its properties is returned, allowing that point to be modified:

.. tabs::

    .. code-tab:: python

        # in Chart2 class
        @classmethod
        def get_data_point_props(
            cls, chart_doc: XChartDocument, series_idx: int, idx: int
        ) -> XPropertySet:
            props = cls.get_data_points_props(chart_doc=chart_doc, idx=series_idx)
            if not props:
                raise NotFoundError("No Datapoints found to get XPropertySet from")

            if idx < 0 or idx >= len(props):
                raise IndexError(f"Index value of {idx} is out of of range")

            return props[idx]

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None

Also there is :py:meth:`.Calc.get_data_points_props` that takes two args and returns the properties for all the data points in a series:

.. tabs::

    .. code-tab:: python

        # in Chart2 class
        @classmethod
        def get_data_points_props(cls, chart_doc: XChartDocument, idx: int) -> List[XPropertySet]:
            data_series_arr = cls.get_data_series(chart_doc=chart_doc)
            if idx < 0 or idx >= len(data_series_arr):
                raise IndexError(f"Index value of {idx} is out of of range")

            props_lst: List[XPropertySet] = []
            i = 0
            while True:
                try:
                    props = data_series_arr[idx].getDataPointByIndex(i)
                    if props is not None:
                        props_lst.append(props)
                    i += 1
                except Exception:
                    props = None

                if props is None:
                    break
            if len(props_lst) > 0:
                Lo.print(f"No Series at index {idx}")
            return props_lst

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None

:py:meth:`.Chart2.get_data_series` is called to get the data series for the chart type as a tuple.

This tuple is iterated over, collecting the property sets for each data point by calling ``XDataSeries.getDataPointByIndex()``.

.. _ch30_donuts:

30.2.3 Anyone for Donuts?
-------------------------

If a table has more than one column of data then a ``Donut`` chart can be used to show each column as a ring.

``_donut_chart()`` in |chart_2_views_py|_ utilizes the "Annual Expenditure on Institutions" table in |ods_doc| (see :numref:`ch30fig_tbl_annual_expenditure_inst`) to generate the donut chart with two rings in :numref:`ch30fig_donut_fig10`.

..
    figure 10

.. cssclass:: screen_shot invert

    .. _ch30fig_tbl_annual_expenditure_inst:
    .. figure:: https://user-images.githubusercontent.com/4193389/206863439-00c75c3d-a37b-4996-97bd-b0e5daf7f05c.png
        :alt: The Annual Expenditure on Institutions Table
        :figclass: align-center

        :The "Annual Expenditure on Institutions" Table.

..
    figure 11

.. cssclass:: screen_shot

    .. _ch30fig_donut_fig10:
    .. figure:: https://user-images.githubusercontent.com/4193389/206863595-0ec8974c-0879-402f-a767-cfe7987e0e11.png
        :alt: A Donut Chart for the Table in previous figure
        :figclass: align-center

        :A Donut Chart for the Table in :numref:`ch30fig_tbl_annual_expenditure_inst`.

``_donut_chart()`` is:

.. tabs::

    .. code-tab:: python

        # Chart2View._donut_chart() in chart_2_views.py
        def _donut_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:
            # uses the "Annual Expenditure on Institutions" table
            range_addr = Calc.get_address(sheet=sheet, range_name="A44:C50")
            chart_doc = Chart2.insert_chart(
                sheet=sheet,
                cells_range=range_addr,
                cell_name="D43",
                width=15,
                height=11,
                diagram_name=ChartTypes.Pie.TEMPLATE_DONUT.DONUT,
            )
            Calc.goto_cell(cell_name="A48", doc=doc)

            Chart2.set_title(chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name="A43"))
            Chart2.view_legend(chart_doc=chart_doc, is_visible=True)
            subtitle = (
                f'Outer: {Calc.get_string(sheet=sheet, cell_name="B44")}\n'
                f'Inner: {Calc.get_string(sheet=sheet, cell_name="C44")}'
            )
            Chart2.set_subtitle(chart_doc=chart_doc, subtitle=subtitle)
            return chart_doc

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None

The only thing of note is the use of a more complex string for :py:meth:`.Chart2.set_subtitle` to display information about both rings.

.. _ch30_area_chart:

30.3 The Area Chart
===================

``_area_chart()`` in |chart_2_views_py|_ utilizes the "Trends in Enrollment in Public Schools in the US" table in |ods_doc| (see :numref:`ch30fig_annual_exp_inst_tbl`) to generate the area chart in :numref:`ch30fig_area_fig12`.

..
    figure 12

.. cssclass:: screen_shot invert

    .. _ch30fig_annual_exp_inst_tbl:
    .. figure:: https://user-images.githubusercontent.com/4193389/206864063-36f9a33e-aec1-4a99-b68d-f9da5302ed27.png
        :alt: The Annual Expenditure on Institutions Table
        :figclass: align-center

        :The "Annual Expenditure on Institutions" Table.

..
    figure 13

.. cssclass:: screen_shot

    .. _ch30fig_area_fig12:
    .. figure:: https://user-images.githubusercontent.com/4193389/206864132-a1ae76b4-b9f0-4d86-a7bf-4dfd954b09c5.png
        :alt: An Area Chart for the Table in previous figure
        :figclass: align-center
        :width: 550px

        :An Area Chart for the Table in :numref:`ch30fig_annual_exp_inst_tbl`.

.. tabs::

    .. code-tab:: python

        # Chart2View._area_chart() in chart_2_views.py
        def _area_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> XChartDocument:
            # draws an area (stacked) chart;
            # uses "Trends in Enrollment in Public Schools in the US" table
            range_addr = Calc.get_address(sheet=sheet, range_name="E45:G50")
            chart_doc = Chart2.insert_chart(
                sheet=sheet,
                cells_range=range_addr,
                cell_name="A52",
                width=16,
                height=11,
                diagram_name=ChartTypes.Area.TEMPLATE_STACKED.AREA,
            )
            Calc.goto_cell(cell_name="A43", doc=doc)

            Chart2.set_title(
                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name="E43")
            )
            Chart2.set_x_axis_title(
                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name="E45")
            )
            Chart2.set_y_axis_title(
                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name="F44")
            )
            Chart2.view_legend(chart_doc=chart_doc, is_visible=True)
            Chart2.rotate_y_axis_title(chart_doc=chart_doc, angle=Angle(90))
            return chart_doc

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None


If the ``Area`` template is replaced by ``StackedArea`` or ``PercentStackedArea`` then the two charts in :numref:`ch30fig_area_stacked_percent_fig12` are generated.

..
    figure 14

.. cssclass:: screen_shot

    .. _ch30fig_area_stacked_percent_fig12:
    .. figure:: https://user-images.githubusercontent.com/4193389/206864771-16c0c07e-ada0-4fc7-8764-27ee9e35b3d3.png
        :alt: Stacked and Percentage Stacked Area Charts for the Table in Figure 12 of this chapter
        :figclass: align-center
        :width: 550px

        :Stacked and Percentage Stacked Area Charts for the Table in :numref:`ch30fig_annual_exp_inst_tbl`.

.. _ch30_line_chart:

30.4 The Line Chart
===================

``_lines_chart()`` in |chart_2_views_py|_ utilizes the "Trends in Expenditure Per Pupil" table in |ods_doc| (see :numref:`ch30fig_trends_expend_pupiil_tbl`) to generate two lines marked with symbols in :numref:`ch00fig_line_fig15`.

..
    figure 15

.. cssclass:: screen_shot invert

    .. _ch30fig_trends_expend_pupiil_tbl:
    .. figure:: https://user-images.githubusercontent.com/4193389/206865014-10d74436-5206-4094-96a9-29fafb891c1b.png
        :alt: The Trends in Expenditure Per Pupil Table
        :figclass: align-center

        :The "Trends in Expenditure Per Pupil" Table.

..
    figure 16

.. cssclass:: screen_shot

    .. _ch00fig_line_fig15:
    .. figure:: https://user-images.githubusercontent.com/4193389/206865098-72b01678-c5c6-42fb-b22d-edc44c6606e5.png
        :alt: Line Charts for the Table in previous figure
        :figclass: align-center
        :width: 550px

        :Line Charts for the Table in :numref:`ch30fig_trends_expend_pupiil_tbl`.

``_lines_chart()`` is:

.. tabs::

    .. code-tab:: python

        # Chart2View._lines_chart() in chart_2_views.py
        def _line_chart(self, doc: XSpreadsheetDocument, sheet: XSpreadsheet) -> None:
            # draw a line chart with data points, no legend;
            # uses "Humidity Levels in NY" table
            range_addr = Calc.get_address(sheet=sheet, range_name="A14:B21")
            chart_doc = Chart2.insert_chart(
                sheet=sheet,
                cells_range=range_addr,
                cell_name="D13",
                width=16,
                height=9,
                diagram_name=ChartTypes.Line.TEMPLATE_SYMBOL.LINE_SYMBOL,
            )
            Calc.goto_cell(cell_name="A1", doc=doc)

            Chart2.set_title(
                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name="A13")
            )
            Chart2.set_x_axis_title(
                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name="A14")
            )
            Chart2.set_y_axis_title(
                chart_doc=chart_doc, title=Calc.get_string(sheet=sheet, cell_name="B14")
            )

    .. only:: html

        .. cssclass:: tab-none

            .. group-tab:: None

:py:meth:`.Chart2.set_data_point_labels` switches off the displaying of the numerical data above the symbols so the chart is less cluttered.

There are many different line chart templates, as listed in :numref:`ch28tblchart_types_and_template_names`.
The ``Line`` template differs from ``LineSymbol`` by not including symbols over the data points.

.. |ods_doc| replace:: ``chartsData.ods``

.. |chart_2_views| replace:: Chart2 Views
.. _chart_2_views: https://github.com/Amourspirit/python-ooouno-ex/tree/main/ex/auto/chart2/Chart_2_Views

.. |chart_2_views_py| replace:: chart_2_views.py
.. _chart_2_views_py: https://github.com/Amourspirit/python-ooouno-ex/blob/main/ex/auto/chart2/Chart_2_Views/chart_2_views.py

.. _DataPointProperties: https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1chart2_1_1DataPointProperties.html
.. _DataSeries: https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1chart2_1_1DataSeries.html
.. _XChartDocument: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1chart2_1_1XChartDocument.html
.. _XDataSeries: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1chart2_1_1XDataSeries.html
.. _XDiagram: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1chart2_1_1XDiagram.html
.. _XTitled: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1chart2_1_1XTitled.html

.. spelling:word-list::
    Donut
