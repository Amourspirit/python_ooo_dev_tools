.. _ch17:

***********************************
Chapter 17. Slide Deck Manipulation
***********************************

.. topic:: Overview

    Deck Building; Master Pages; Adding a Slide to a Deck; Rearranging a Deck; Appending Two Decks; Exporting a Slide as an Image; Extracting the Text from a Deck

    Examples: |p_builder|_ and |m_use|_

This chapter looks at a number of common tasks performed with slide decks:

.. cssclass:: ul-list

    * building a slide deck based on a file of text notes;
    * using, changing, and creating master pages for slide decks;
    * adding a slide to an existing deck;
    * rearranging the slides in a deck;
    * appending two (or more) decks;
    * exporting a slide from a deck as an image;
    * extracting all the text from a slide deck.

17.1 Building a Deck from Notes
===============================

With Draw methods such as :py:meth:`~.Draw.title_slide` and :py:meth:`~.Draw.bullets_slide` it's quite easy to write a program that converts a set of notes in a text file into a slides deck.
The |p_builder_py|_ example does just that, using textual input formatted as shown below:

.. cssclass:: rst-collapse

    .. collapse:: Points Builder Text Data

        .. code::

            What is a Algorithm? 

            > An algorithm is a finite set of unambiguous instructions for solving a problem.

            >> An algorithm is correct if on all legitimate inputs, it outputs the right answer in a finite amount of time

            > Can be expressed as
            >>pseudocode
            >>flow charts
            >>text in a natural language (e.g. English)
            >>computer code

            // ======================================================

            Algorithm Design

            > The theoretical  study of how to solve  computational problems
            >>sorting a list of numbers
            >>   finding a shortest route on a map
            >> scheduling when to work on homework
            >> answering web search queries
            >> and so on...

            // ======================================================

            The Importance of Algorithms

            > Their impact is broad and far-reaching.
            >> Internet. Web search, packet routing, ...
            >> Computers. Circuit layout, file system, compilers, ...
            >> Computer graphics. Movies, virtual reality, ...
            >> Security. Cell phones, e-commerce, ...
            >> Multimedia. MP3, JPG, DivX, HDTV, ...
            >> Social networks.  Recommendations, news feeds, ads, ...

            > Their impact is broad and far-reaching.
            >> Internet. Web search, packet routing, ...
            >> Computers. Circuit layout, file system, compilers, ...
            >> Computer graphics. Movies, virtual reality, ...
            >> Security. Cell phones, e-commerce, ...
            >> Multimedia. MP3, JPG, DivX, HDTV, ...
            >> Social networks.  Recommendations, news feeds, ads, ...

            // ======================================================

            Top Ten Algorithms of the Century

            > Ten algorithms having "the greatest influence on the development and practice of science and engineering in the 20th century".

            >> Dongarra and Sullivan, "Computing in Science and Engineering", January/February 2000

            >> Barry Cipra, "The Best of the 20th Century: Editors Name Top 10 Algorithms", SIAM News, Volume 33, Number 4, May 2000
            >>> http://www.siam.org/pdf/news/637.pdf

When |p_builder_py|_ reads this text, it generates three slides shown in :numref:`ch17fig_points_builder_slides`.

..
    figure 1

.. cssclass:: screen_shot

    .. _ch17fig_points_builder_slides:
    .. figure:: https://user-images.githubusercontent.com/4193389/200890963-b4569f69-a647-465a-9154-0ec114c45121.png
        :alt: Slides Generated by points builder
        :width: 550px
        :figclass: align-center

        :Slides Generated by Points Builder

The title slide in :numref:`ch17fig_points_builder_slides` is generated automatically, but the other slides are created from the input text by calling Draw.bulletsSlide() and Draw.addBullet().

The reason the output looks so good is that |p_builder_py|_ uses one of Impress' templates, ``Inspiration.otp``.
These files are listed in Impress when you open the "Master Pages" section of the Tasks pane, part of which is shown in :numref:`ch17fig_impress_master_pages`.

..
    figure 2

.. cssclass:: screen_shot

    .. _ch17fig_impress_master_pages:
    .. figure:: https://user-images.githubusercontent.com/4193389/201796280-7d5331da-22a3-4057-9177-f06802d500eb.png
        :alt: The List of Master Pages in Impress.
        :width: 433px
        :figclass: align-center

        :The List of Master Pages in Impress.

If you move the cursor over the thumbnail images, the name of the template file is displayed as a tooltip.

The ``main()`` function of |p_builder_py|_ starts by printing the names of all the available templates, before using "Inspiration.otp" to create a new presentation document:

.. tabs::

    .. code-tab:: python

        # partial points_builder.py module
        class PointsBuilder:
            def __init__(self, points_fnm: PathOrStr) -> None:
                _ = FileIO.is_exist_file(fnm=points_fnm, raise_err=True)
                self._points_fnm = FileIO.get_absolute_path(points_fnm)

            def main(self) -> None:
                loader = Lo.load_office(Lo.ConnectPipe())

                # create Impress page or Draw slide
                try:
                    self._report_templates()
                    tmpl_name = "Inspiration.otp"  # "Piano.otp"
                    template_fnm = Path(Draw.get_slide_template_path(), tmpl_name)
                    _ = FileIO.is_exist_file(template_fnm, True)
                    doc = Lo.create_doc_from_template(template_path=template_fnm, loader=loader)

                    self._read_points(doc)

                    print(f"Total no. of slides: {Draw.get_slides_count(doc)}")

                    GUI.set_visible(is_visible=True, odoc=doc)
                    Lo.delay(2000)

                    msg_result = MsgBox.msgbox(
                        "Do you wish to close document?",
                        "All done",
                        boxtype=MessageBoxType.QUERYBOX,
                        buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,
                    )
                    if msg_result == MessageBoxResultsEnum.YES:
                        Lo.close_doc(doc=doc, deliver_ownership=True)
                        Lo.close_office()
                    else:
                        print("Keeping document open")
                except Exception:
                    Lo.close_office()
                    raise

    .. cssclass:: tab-none

        .. group-tab:: None


``_report_templates()`` uses ``Info.get_dirs("Template")`` to retrieve a list of all the directories examined by Office when looking for templates.
It also calls :py:meth:`.Draw.get_slide_template_path` to retrieve the default slide template directory, and prints the names of the files in that folder:

.. seealso::

    :py:meth:`.Info.get_dirs`

.. tabs::

    .. code-tab:: python

        # in points_builder.py
        def _report_templates(self) -> None:
            template_dirs = Info.get_dirs(setting="Template")
            print("Templates dir:")
            for dir in template_dirs:
                print(f"  {dir}")

            temmplate_dir = Draw.get_slide_template_path()
            print()
            print(f'Templates files in "{temmplate_dir}"')
            template_fnms = FileIO.get_file_paths(temmplate_dir)
            for fnm in template_fnms:
                print(f"  {fnm}")

    .. cssclass:: tab-none

        .. group-tab:: None

.. cssclass:: rst-collapse

    .. collapse:: _report_templates()'s output:

        .. code::

            Templates dir:
              C:\Program Files\LibreOffice\share\template\common
              C:\Program Files\LibreOffice\share\template\en-US
              D:\Users\bigby\Documents\Projects\Python\python-ooouno-ex\$BUNDLED_EXTENSIONS\wiki-publisher\templates
              C:\Users\bigby\AppData\Roaming\LibreOffice\4\user\template

            Templates files in "C:\Program Files\LibreOffice\share\template\common\presnt"
              C:\Program Files\LibreOffice\share\template\common\presnt\Beehive.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Blueprint_Plans.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Blue_Curve.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Candy.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\DNA.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Focus.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Forestbird.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Freshes.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Grey_Elegant.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Growing_Liberty.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Inspiration.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Lights.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Metropolis.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Midnightblue.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Nature_Illustration.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Pencil.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Piano.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Portfolio.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Progress.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Sunset.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Vintage.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Vivid.otp
              C:\Program Files\LibreOffice\share\template\common\presnt\Yellow_Idea.otp

|p_builder_py|_ employs the ``Inspiration.otp`` template, via the call:

.. tabs::

    .. code-tab:: python

        tmpl_name = "Inspiration.otp"  # "Piano.otp"
        template_fnm = Path(Draw.get_slide_template_path(), tmpl_name)
        _ = FileIO.is_exist_file(template_fnm, True)
        doc = Lo.create_doc_from_template(template_path=template_fnm, loader=loader)

    .. cssclass:: tab-none

        .. group-tab:: None

:py:meth:`.Lo.create_doc_from_template` is a variant of :py:meth:`.Lo.create_doc` which specifies a template for the new document.
It calls ``XComponentLoader.loadComponentFromURL()`` with the template file as an argument, and sets the ``AsTemplate`` property:

.. tabs::

    .. code-tab:: python

        #in the Lo class
        _ms_factory: XMultiServiceFactory = None

        @classmethod
        def create_doc_from_template(cls, template_path: PathOrStr, loader: XComponentLoader) -> XComponent:
            cargs = CancelEventArgs(Lo.create_doc_from_template.__qualname__)
            _Events().trigger(LoNamedEvent.DOC_CREATING, cargs)
            if cargs.cancel:
                raise CancelEventError(cargs)
            if not FileIO.is_openable(template_path):
                raise Exception(f"Template file can not be opened: '{template_path}'")
            Lo.print(f"Opening template: '{template_path}'")
            template_url = FileIO.fnm_to_url(fnm=template_path)

            props = Props.make_props(Hidden=True, AsTemplate=True)
            try:
                cls._doc = loader.loadComponentFromURL(template_url, "_blank", 0, props)
                cls._ms_factory = cls.qi(XMultiServiceFactory, cls._doc, raise_err=True)
                _Events().trigger(LoNamedEvent.DOC_CREATED, EventArgs.from_args(cargs))
                return cls._doc
            except Exception as e:
                raise Exception(f"Could not create document from template") from e

    .. cssclass:: tab-none

        .. group-tab:: None

.. seealso::

    .. cssclass:: src-link

        :odev_src_lo_meth:`create_doc_from_template`

The ``_read_points()`` method in|p_builder_py|_ loads the text points file line-by-line.
It ignores blank lines and lines starting with "//", and examines the first character on each line:

.. tabs::

    .. code-tab:: python

        # in points_builder.py
        def _read_points(self, doc: XComponent) -> None:
            curr_slide = Draw.get_slide(doc=doc, idx=0)
            Draw.title_slide(
                slide=curr_slide, title="Python-Generated Slides", sub_title="Using LibreOffice"
            )
            try:

                def process_bullet(line: str, xbody: XText) -> None:
                    # count the number of '>'s to determine the bullet level
                    if xbody is None:
                        print(f"No slide body for {line}")
                        return

                    pos = 0
                    s_lst = [*line]
                    ch = s_lst[pos]
                    while ch == ">":
                        pos += 1
                        ch = s_lst[pos]
                    sub_str = "".join(s_lst[pos:]).strip()
                    Draw.add_bullet(bulls_txt=xbody, level=pos - 1, text=sub_str)

                body: XText = None
                with open(self._points_fnm, "r") as file:
                    # remove empty lines
                    data = (row for row in file if row.strip())
                    # chain generator
                    # strip of remove anything starting //
                    # // for comment
                    data = (row for row in data if not row.lstrip().startswith("//"))

                    for row in data:
                        ch = row[:1]
                        if ch == ">":
                            process_bullet(line=row, xbody=body)
                        else:
                            curr_slide = Draw.add_slide(doc)
                            body = Draw.bullets_slide(slide=curr_slide, title=row.strip())
                print(f"Read in point file: {self._points_fnm.name}")
            except Exception as e:
                print(f"Error reading points file: {self._points_fnm}")
                print(f"  {e}")

    .. cssclass:: tab-none

        .. group-tab:: None

If the line starts with a ``>``, then ``process_bullet()`` is called to determine how many ``>``'s start the line.
Depending on the number, :py:meth:`.Draw.add_bullet` is called with a different bullet indentation level value.
If the line doesn't start with a ``>``, then it's assumed to be the title line of a new slide, and :py:meth:`.Draw.add_slide` and :py:meth:`.Draw.bullets_slide` create a new bullets-based slide.

17.2 Master Pages
=================

When a new slide deck is created it always has a single slide and a default master page, and every slide created subsequently will use this master page to format its background.
The easiest way to view the master page is through the Impress GUI – by clicking on the View, Master, Slide Master menu, which displays something like :numref:`ch17fig_default_master_page`.

..
    figure 3

.. cssclass:: screen_shot invert

    .. _ch17fig_default_master_page:
    .. figure:: https://user-images.githubusercontent.com/4193389/201809322-483a529c-52d7-4111-af7a-1e5931860671.png
        :alt: The Default Master Page.
        :figclass: align-center

        :The Default Master Page.

There are five presentation shapes in :numref:`ch17fig_default_master_page`.
From top-to-bottom, left-to-right, they are TitleTextShape_, OutlinerShape_, DateTimeShape_, FooterShape_, and SlideNumberShape_.

Even though a new slide links to this master page, the date/time, footer, and slide number text are not automatically displayed on the slide; their rendering must be turned on.

It's possible to create more master pages in addition to the default one in :numref:`ch17fig_default_master_page`, and link a slide to one of those.

The |m_use_py|_ example illustrates a number of master page features: the default master page has text added to its footer section,
and a shape and text are placed in its top-left corner.
The slide deck holds four slides – three of them link to the default master page, and are set to display its footer and slide number.
However, the third slide in the deck links to a second master page with a slightly different appearance.

:numref:`ch17fig_two_master_page` shows the all the slides in the deck.

..
    figure 4

.. cssclass:: screen_shot invert

    .. _ch17fig_two_master_page:
    .. figure:: https://user-images.githubusercontent.com/4193389/201810565-a75fbff8-9105-4e5d-8034-4825558fb406.png
        :alt: A Slide Deck with Two Master Pages
        :figclass: align-center

        :A Slide Deck with Two Master Pages.

Slides 1, 2, and 4 use the default master page, while slide 3 uses the new master.

The ``main()`` method for |m_use_py|_ is:

.. tabs::

    .. code-tab:: python

        # in master_use.py
        class MasterUse:
            def main(self) -> None:
                loader = Lo.load_office(Lo.ConnectPipe())
                try:
                    doc = Draw.create_impress_doc(loader)

                    # report on the shapes on the default master page
                    master_page = Draw.get_master_page(doc=doc, idx=0)
                    print("Default Master Page")
                    Draw.show_shapes_info(master_page)

                    # set the master page's footer text
                    Draw.set_master_footer(master=master_page, text="Master Use Slides")

                    # add a rectangle and text to the default master page
                    # at the top-left of the slide
                    sz = Draw.get_slide_size(master_page)
                    _ = Draw.draw_rectangle(
                        slide=master_page, x=5, y=7, width=round(sz.Width / 6), height=round(sz.Height / 6)
                    )
                    _ = Draw.draw_text(
                        slide=master_page, msg="Default Master Page",
                        x=10, y=15, width=100, height=10, font_size=24
                    )

                    # set slide 1 to use the master page's slide number
                    # but its own footer text
                    slide1 = Draw.get_slide(doc=doc, idx=0)
                    Draw.title_slide(slide=slide1, title="Slide 1")

                    # IsPageNumberVisible = True: use the master page's slide number
                    # change the master page's footer for first slide;
                    # does not work if the master already has a footer
                    Props.set(
                        slide1, IsPageNumberVisible=True, IsFooterVisible=True, FooterText="MU Slides"
                    )

                    # add three more slides, which use the master page's
                    # slide number and footer
                    for i in range(1, 4):  # 1, 2, 3
                        slide = Draw.insert_slide(doc=doc, idx=i)
                        _ = Draw.bullets_slide(slide=slide, title=f"Slide {i}")
                        Props.set(slide, IsPageNumberVisible=True, IsFooterVisible=True)

                    # create master page 2
                    master2 = Draw.insert_master_page(doc=doc, idx=1)
                    _ = Draw.add_slide_number(master2)

                    print("Master Page 2")
                    Draw.show_shapes_info(master2)

                    # link master page 2 to third slide
                    Draw.set_master_page(slide=Draw.get_slide(doc=doc, idx=2), page=master2)

                    # put ellipse and text on master page 2
                    ellipse = Draw.draw_ellipse(
                        slide=master2, x=5, y=7, width=round(sz.Width / 6), height=round(sz.Height / 6)
                    )
                    Props.set(ellipse, FillColor=CommonColor.GREEN_YELLOW)
                    _ = Draw.draw_text(
                        slide=master2, msg="Master Page 2", x=10, y=15, width=100, height=10, font_size=24
                    )

                    GUI.set_visible(is_visible=True, odoc=doc)

                    Lo.delay(2_000)

                    msg_result = MsgBox.msgbox(
                        "Do you wish to close document?",
                        "All done",
                        boxtype=MessageBoxType.QUERYBOX,
                        buttons=MessageBoxButtonsEnum.BUTTONS_YES_NO,
                    )
                    if msg_result == MessageBoxResultsEnum.YES:
                        Lo.close_doc(doc=doc, deliver_ownership=True)
                        Lo.close_office()
                    else:
                        print("Keeping document open")
                except Exception:
                    Lo.close_office()
                    raise

    .. cssclass:: tab-none

        .. group-tab:: None

17.2.1 Accessing a Master Page
------------------------------

A presentation (or drawing) document can access its master pages through the XMasterPagesSupplier_ interface in the GenericDrawingDocument_ service.
``XMasterPagesSupplier.getMasterPages()`` returns a single XDrawPages_ object:

.. tabs::

    .. code-tab:: python

        mp_supp = Lo.qi(XMasterPagesSupplier, doc)
        pgs = mp_supp.getMasterPages()  # XDrawPages

    .. cssclass:: tab-none

        .. group-tab:: None

The XDrawPages_ object is an indexed collection, with the default master page at position ``0``:

.. tabs::

    .. code-tab:: python

        master_page = Lo.qi(XDrawPage, pgs.getByIndex(0))

    .. cssclass:: tab-none

        .. group-tab:: None

Note that there's no ``XMasterPage`` interface – both slides and master pages are manipulated using XDrawPage_.

These preceding lines are packaged up as :py:meth:`.Draw.get_master_page`:

.. tabs::

    .. code-tab:: python

        # in the Draw class (simplified)
        @staticmethod
        def get_master_page(doc: XComponent, idx: int) -> XDrawPage:
            mp_supp = Lo.qi(XMasterPagesSupplier, doc)
            pgs = mp_supp.getMasterPages()
            return Lo.qi(XDrawPage, pgs.getByIndex(idx), True)

    .. cssclass:: tab-none

        .. group-tab:: None

There's a second way of obtaining a master page, via the link between a slide and its master; the linked master is called a target.
This is implemented by an overloaded :py:meth:`.Draw.get_master_page` method:

.. tabs::

    .. code-tab:: python

        # in the Draw class (simplified)
        @staticmethod
        def get_master_page(slide: XDrawPage) -> XDrawPage:
            mp_target = Lo.qi(XMasterPageTarget, slide, True)
            return mp_target.getMasterPage()

    .. cssclass:: tab-none

        .. group-tab:: None

.. seealso::

    .. cssclass:: src-link

        :odev_src_draw_meth:`get_master_page`

17.2.2 What's on a Master Page?
-------------------------------

The default master page was shown in :numref:`ch17fig_default_master_page`, and its structure is confirmed in |m_use_py|_ when :py:meth:`.Draw.show_shapes_info` is called:

.. tabs::

    .. code-tab:: python

        # in main() of master_use.py
        master_page = Draw.get_master_page(doc=doc, idx=0)
        print("Default Master Page")
        Draw.show_shapes_info(master_page)

    .. cssclass:: tab-none

        .. group-tab:: None

The output:

::

    Default Master Page
    Draw Page shapes:
      Shape service: com.sun.star.presentation.TitleTextShape; z-order: 0
      Shape service: com.sun.star.presentation.OutlinerShape; z-order: 1
      Shape service: com.sun.star.presentation.DateTimeShape; z-order: 2
      Shape service: com.sun.star.presentation.FooterShape; z-order: 3
      Shape service: com.sun.star.presentation.SlideNumberShape;z-order:4

A new master page is created by using ``XMasterPagesSupplier.getMasterPages()`` and ``XDrawPages.insertNewByIndex()``, as shown in :py:meth:`.Draw.insert_master_page`:

.. tabs::

    .. code-tab:: python

        # in the Draw class
        @staticmethod
        def insert_master_page(doc: XComponent, idx: int) -> XDrawPage:
            try:
                mp_supp = Lo.qi(XMasterPagesSupplier, doc, True)
                pgs = mp_supp.getMasterPages()
                result = pgs.insertNewByIndex(idx)
                if result is None:
                    raise NoneError("None Value: insertNewByIndex() return None")
                return result
            except Exception as e:
                raise DrawPageError("Unable to insert master page") from e

    .. cssclass:: tab-none

        .. group-tab:: None

The new master page contains no presentation shapes (unlike the default one). They must be added separately.

17.2.3 Modifying a Master Page
------------------------------

|m_use_py| changes the default master page in three ways: it adds text to the footer shape (which is empty by default),
and places a blue rectangle and some text in the top-left corner of the master:

.. tabs::

    .. code-tab:: python

        # in main of master_use.py
        # set the master page's footer text
        Draw.set_master_footer(master=master_page, text="Master Use Slides")

        # add a rectangle and text to the default master page
        # at the top-left of the slide
        sz = Draw.get_slide_size(master_page)
        _ = Draw.draw_rectangle(
            slide=master_page, x=5, y=7, width=round(sz.Width / 6), height=round(sz.Height / 6)
        )
        _ = Draw.draw_text(
            slide=master_page, msg="Default Master Page", x=10, y=15, width=100, height=10, font_size=24
        )

    .. cssclass:: tab-none

        .. group-tab:: None

:py:meth:`.Draw.set_master_footer` searches through the shapes on the page looking for a FooterShape_.
The shape is cast to a text interface, and a string added:

.. tabs::

    .. code-tab:: python

        # in the Draw class
        @classmethod
        def set_master_footer(cls, master: XDrawPage, text: str) -> None:
            try:
                footer_shape = cls.find_shape_by_type(
                    slide=master, shape_type=DrawingNameSpaceKind.SHAPE_TYPE_FOOTER
                )
                txt_field = Lo.qi(XText, footer_shape, True)
                txt_field.setString(text)
            except ShapeMissingError:
                raise
            except Exception as e:
                raise DrawPageError("Unable to set master footer") from e

    .. cssclass:: tab-none

        .. group-tab:: None

MastersUse's second master page contains no shapes initially.
An ellipse and some text are added to it in the same way as for the default master page:

.. tabs::

    .. code-tab:: python

        # in main of master_use.py
        master2 = Draw.insert_master_page(doc=doc, idx=1)
        _ = Draw.add_slide_number(master2)

        # put ellipse and text on master page 2
        ellipse = Draw.draw_ellipse(
            slide=master2, x=5, y=7, width=round(sz.Width / 6), height=round(sz.Height / 6)
        )
        Props.set(ellipse, FillColor=CommonColor.GREEN_YELLOW)
        _ = Draw.draw_text(
            slide=master2, msg="Master Page 2", x=10, y=15, width=100, height=10, font_size=24
        )

    .. cssclass:: tab-none

        .. group-tab:: None

Unlike the default master page, a number shape must be explicitly added to the second master, by calling :py:meth:`.Draw.add_slide_number`:

.. tabs::

    .. code-tab:: python

        _ = Draw.add_slide_number(master2)

    .. cssclass:: tab-none

        .. group-tab:: None

It is implemented as:

.. tabs::

    .. code-tab:: python

        # in the Draw class
        @classmethod
        def add_slide_number(cls, slide: XDrawPage) -> XShape:
            try:
                sz = cls.get_slide_size(slide)
                width = 60
                height = 15
                return cls.add_pres_shape(
                    slide=slide,
                    shape_type=PresentationKind.SLIDE_NUMBER_SHAPE,
                    x=sz.Width - width - 12,
                    y=sz.Height - height - 4,
                    width=width,
                    height=height,
                )
            except ShapeError:
                raise
            except Exception as e:
                raise ShapeError("Unable to add slide number") from e

    .. cssclass:: tab-none

        .. group-tab:: None

:py:meth:`.Draw.add_pres_shape` creates a shape from the ``com.sun.star.presentation`` package:

.. tabs::

    .. code-tab:: python

        # in the Draw class
        @classmethod
        def add_pres_shape(
            cls, slide: XDrawPage, shape_type: PresentationKind, x: int, y: int, width: int, height: int
        ) -> XShape:
            try:
                cls.warns_position(slide=slide, x=x, y=y)
                shape = Lo.create_instance_msf(XShape, shape_type.to_namespace(), raise_err=True)
                if shape is not None:
                    slide.add(shape)
                    cls.set_position(shape, x, y)
                    cls.set_size(shape, width, height)
                return shape
            except Exception as e:
                raise ShapeError("Unable to add slide number") from e

    .. cssclass:: tab-none

        .. group-tab:: None

17.2.4 Using a Master Page
--------------------------

New slides are automatically linked to the default master page,
but properties must be explicitly set in order for the master's date/time, footer, and page number to be visible on the slide.
For example, the footer and page number are drawn on a slide like so:

.. tabs::

    .. code-tab:: python

        # in main of master_use.py
        slide1 = Draw.get_slide(doc=doc, idx=0)
        
        # ... 

        Props.set(slide1, IsPageNumberVisible=True, IsFooterVisible=True, FooterText="MU Slides")

    .. cssclass:: tab-none

        .. group-tab:: None

The relevant property for showing the date/time is ``IsDateTimeVisible``.
All these properties are define in the |p_draw_service|_ service.

A related property is ``FooterText``, which changes the footer text for a specific slide.

However, this only works if the linked master page doesn't have its own footer text.

A slide can be linked to a different master by calling :py:meth:`.Draw.set_master_page`:

.. tabs::

    .. code-tab:: python

        # in main of master_use.py
        # link master page 2 to third slide
        Draw.set_master_page(slide=Draw.get_slide(doc=doc, idx=2), page=master2)

    .. cssclass:: tab-none

        .. group-tab:: None

It uses the XMasterPageTarget_ interface to create the new link:

.. tabs::

    .. code-tab:: python

        # in the Draw class
        @staticmethod
        def set_master_page(slide: XDrawPage, page: XDrawPage) -> None:
            try:
                mp_target = Lo.qi(XMasterPageTarget, slide, True)
                mp_target.setMasterPage(page)
            except Exception as e:
                raise DrawError("Unable to set master page") from e

    .. cssclass:: tab-none

        .. group-tab:: None


17.3 Adding a Slide to a Deck
=============================

Work in progress ...

.. |p_builder| replace:: Points Builder
.. _p_builder: https://github.com/Amourspirit/python-ooouno-ex/tree/main/ex/auto/impress/odev_points_builder

.. |p_builder_py| replace:: points_builder.py
.. _p_builder_py: https://github.com/Amourspirit/python-ooouno-ex/blob/main/ex/auto/impress/odev_points_builder/points_builder.py

.. |m_use| replace:: Master Use
.. _m_use: https://github.com/Amourspirit/python-ooouno-ex/tree/main/ex/auto/impress/odev_master_use

.. |m_use_py| replace:: master_use.py
.. _m_use_py: https://github.com/Amourspirit/python-ooouno-ex/blob/main/ex/auto/impress/odev_master_use/master_use.py

.. |p_draw_service| replace:: com.sun.star.presentation.DrawPage
.. _p_draw_service: https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1drawing_1_1DrawPage.html

.. _TitleTextShape: https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1presentation_1_1TitleTextShape.html
.. _OutlinerShape: https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1presentation_1_1OutlinerShape.html
.. _DateTimeShape: https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1presentation_1_1DateTimeShape.html
.. _FooterShape: https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1presentation_1_1FooterShape.html
.. _SlideNumberShape: https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1presentation_1_1SlideNumberShape.html
.. _XMasterPagesSupplier: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1drawing_1_1XMasterPagesSupplier.html
.. _GenericDrawingDocument: https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1drawing_1_1GenericDrawingDocument.html
.. _XDrawPages: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1drawing_1_1XDrawPages.html
.. _XDrawPage: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1drawing_1_1XDrawPage.html
.. _XMasterPageTarget: https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1drawing_1_1XMasterPageTarget.html